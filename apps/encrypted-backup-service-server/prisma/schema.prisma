datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model EncryptionKey {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  key       String?
  updatedAt DateTime @updatedAt
}

model Backup {
  backupData String?
  backupUser String?
  createdAt  DateTime @default(now())
  data       String?
  id         String   @id @default(cuid())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Session {
  createdAt        DateTime  @default(now())
  expiresAt        DateTime?
  id               String    @id @default(cuid())
  sessionCreatedAt DateTime?
  sessionExpiresAt DateTime?
  sessionToken     String?
  sessionUser      String?
  token            String?
  updatedAt        DateTime  @updatedAt
  user             User?     @relation(fields: [userId], references: [id])
  userId           String?
}

model Company {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  name      String?
  roles     Role[]
  updatedAt DateTime @updatedAt
  users     User[]
}

model Role {
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  name        String?
  roleCompany String?
  roleName    String?
  roleUser    String?
  updatedAt   DateTime @updatedAt
}

model User {
  backups      Backup[]
  company      Company?  @relation(fields: [companyId], references: [id])
  companyId    String?
  createdAt    DateTime  @default(now())
  email        String?   @unique
  firstName    String?
  id           String    @id @default(cuid())
  lastName     String?
  password     String
  roles        Json
  sessions     Session[]
  updatedAt    DateTime  @updatedAt
  userCompany  String?
  userPassword String?
  userUsername String?
  username     String    @unique
}
