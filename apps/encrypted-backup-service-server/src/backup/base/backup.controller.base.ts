/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BackupService } from "../backup.service";
import { BackupCreateInput } from "./BackupCreateInput";
import { Backup } from "./Backup";
import { BackupFindManyArgs } from "./BackupFindManyArgs";
import { BackupWhereUniqueInput } from "./BackupWhereUniqueInput";
import { BackupUpdateInput } from "./BackupUpdateInput";

export class BackupControllerBase {
  constructor(protected readonly service: BackupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Backup })
  async createBackup(@common.Body() data: BackupCreateInput): Promise<Backup> {
    return await this.service.createBackup({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        backupData: true,
        backupUser: true,
        createdAt: true,
        data: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Backup] })
  @ApiNestedQuery(BackupFindManyArgs)
  async backups(@common.Req() request: Request): Promise<Backup[]> {
    const args = plainToClass(BackupFindManyArgs, request.query);
    return this.service.backups({
      ...args,
      select: {
        backupData: true,
        backupUser: true,
        createdAt: true,
        data: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Backup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async backup(
    @common.Param() params: BackupWhereUniqueInput
  ): Promise<Backup | null> {
    const result = await this.service.backup({
      where: params,
      select: {
        backupData: true,
        backupUser: true,
        createdAt: true,
        data: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Backup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBackup(
    @common.Param() params: BackupWhereUniqueInput,
    @common.Body() data: BackupUpdateInput
  ): Promise<Backup | null> {
    try {
      return await this.service.updateBackup({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          backupData: true,
          backupUser: true,
          createdAt: true,
          data: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Backup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBackup(
    @common.Param() params: BackupWhereUniqueInput
  ): Promise<Backup | null> {
    try {
      return await this.service.deleteBackup({
        where: params,
        select: {
          backupData: true,
          backupUser: true,
          createdAt: true,
          data: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
